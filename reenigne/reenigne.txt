  Should 32-bit x86 and 16-bit x86 be separate primary targets?
    No: they can share a lot of logic
    Yes: 32-bit should not be cluttered up by 16-bit
  Should 64-bit x86 and 32-bit x86 be separate primary targets?
    No: they can share a lot of logic
    Yes: 64-bit should not be cluttered up by 32-bit
  Let's err on the side of code-sharing for now. It's easier to split it up later than combine.

Execution strategies:
  Dynamic:
    Machine state is all emulator state
    When executing an instruction:
      Execute it in emulator
      determine if it has changed since it was last reverse-engineered. If it has:
        Save a snapshot of the machine state
        Add it to the reverse-engineered code
        If there is an alternate code path (call returned, branch taken/untaken) then add it to the static strategy list
    When pressing the special "wait until now" key combo, save a snapshot of the machine state
    When pressing a normal key, go back to the last snapshot before executing keypress
    When hitting an illegal opcode, terminate emulation
  Static:
    Machine state is just CS:IP
    Decompile to "throw UnexecutedCodeException();" and commented-out code
    Assume code does not change
    Add conditional branch targets and known call destinations to static strategy list

Label


If specified load address is 0x10000:
  For .com file, should 0x10000 be the PSP or the start of loaded data?
  For an .exe file, should 0x10000 be the start of image?
  Let's make it as easy as possible to translate between physical addresses (used for generated labels) and offsets in the simple case.
  So 0x10000 is the PSP for a .com file and start of image for an .exe file.
    This may mean reducing the value in the config file (by the length of the PSP?)


For speed, the decoder should be a 256-tree
  Have an array
  Each element of the array is either a non-leaf (index into another part of the array) or a leaf (index into an array of InstructionPatterns)


Implement as needed:
  Program Segment Prefix (https://en.wikipedia.org/wiki/Program_Segment_Prefix)
  Environment block

What does InstructionPattern need to contain for converting between Byte stream and parameters?
  Ignore big-endian formats for now


  Want to implement resolve() for all TycoSpecifiers
  That includes TypeOfTypeSpecifier, which requires knowing the type of an Expression
  Knowning the type of an Identifier (which is an Expression) requires resolving the identifier

